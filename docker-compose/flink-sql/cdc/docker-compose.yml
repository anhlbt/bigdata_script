version: '3'
services:
  # postgres:
  #   image: debezium/example-postgres:latest
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     - POSTGRES_PASSWORD=123456
  #     - POSTGRES_DB=postgres
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     # - POSTGRES_PORT=5432
  #   volumes:
  #     # - ${PWD}/postgres-db-volume:/var/lib/postgresql/data
  #     - ./datadir/postgresql:/var/lib/postgresql/data
  mysql:
    image: debezium/example-mysql:1.7
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpw
    volumes:
      - ./datadir/mysql:/var/lib/mysql
      # - ./datadir/my.cnf:/etc/my.cnf #/etc/mysql/my.cnf

  elasticsearch:
    image: elastic/elasticsearch:7.17.7
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  kibana:
    image: elastic/kibana:7.17.7
    ports:
      - "5601:5601"

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:2.12-2.2.1
    ports:
      - "9092:9092"
      - "9094:9094"
    depends_on:
      - zookeeper
    environment:
      - KAFKA_ADVERTISED_LISTENERS=INSIDE://:9094,OUTSIDE://localhost:9092
      - KAFKA_LISTENERS=INSIDE://:9094,OUTSIDE://:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS="user_behavior:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  sql-client:
    image: sql-client
    build:
      context: ./sql-client 
    depends_on:
      - kafka
      - jobmanager
      - elasticsearch
    environment:
      FLINK_JOBMANAGER_HOST: jobmanager
      ZOOKEEPER_CONNECT: zookeeper
      KAFKA_BOOTSTRAP: kafka
      MYSQL_HOST: mysql
      ES_HOST: elasticsearch
    volumes:
      - ./datadir/flink:/opt/sql-client/data

  jobmanager:
    image: flink:1.13.2-scala_2.11
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
#    volumes:
#      - ./data/flink:/opt/flink/data

  taskmanager:
    image: flink:1.13.2-scala_2.11
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 40
#    volumes:
#      - ./data/flink:/opt/flink/data


#  resourcemanager:
#    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop2.7.4-java8
#    ports:
#      - 8088:8088
#    container_name: resourcemanager
#    environment:
#      SERVICE_PRECONDITION: "namenode:50070 datanode:50075"
#    env_file:
#      - ./hadoop.env

#  nodemanager1:
#    image: bde2020/hadoop-nodemanager:2.0.0-hadoop2.7.4-java8
#    container_name: nodemanager
#    environment:
#      SERVICE_PRECONDITION: "namenode:50070 datanode:50075 resourcemanager:8088"
#    env_file:
#      - ./hadoop.env

#  historyserver:
#    image: bde2020/hadoop-historyserver:2.0.0-hadoop2.7.4-java8
#    container_name: historyserver
#    environment:
#      SERVICE_PRECONDITION: "namenode:50070 datanode:50075 resourcemanager:8088"
#    volumes:
#      - ./data/yarn:/hadoop/yarn/timeline
#    env_file:
#      - ./hadoop.env

#  flinkweb:
#    image: alexskyer/flink-web1.13.2:v1
#    ports:
#      - 9084:9084
#      - 8081:9081
#    container_name: flinkweb

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop2.7.4-java8
    container_name: namenode
    volumes:
      - ./data/namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop-hive.env
    ports:
      - "50070:50070"
      - 9000:9000
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8
    container_name: datanode
    volumes:
      - ./data/datanode:/hadoop/dfs/data
    env_file:
      - ./hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:50070"
    ports:
      - "50075:50075"
  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-server
    env_file:
      - ./hadoop-hive.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    ports:
      - "10000:10000"
  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    env_file:
      - ./hadoop-hive.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:50070 datanode:50075 hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"
  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      # - POSTGRES_PORT=5432
    volumes:
      - ./datadir/postgresql:/var/lib/postgresql/data

